
//  ===============================================================================================
// QCustomPlot helper for IDA Pro by Sirmabus
// QCustomPlot is a Qt C++ widget for plotting and data visualization. Emanuel Eichhammer
// http://www.qcustomplot.com/
//  ===============================================================================================
#include "stdafx.h"
#include "IdaQcp.h"

// Critical section lock
class CLock
{
public:
	CLock() { InitializeCriticalSectionAndSpinCount(&m_CritSec, 4000); };
	~CLock() { DeleteCriticalSection(&m_CritSec); };

	inline void lock() { EnterCriticalSection(&m_CritSec); };
	inline void unlock() { LeaveCriticalSection(&m_CritSec); };

private:
	__declspec(align(16)) CRITICAL_SECTION m_CritSec;
};

// QCP form data container
struct QCPINFO
{
	QWidget *form;
	QLayout *layout;
	UINT user;
	void (CALLBACK *onOpen)(QWidget*, QLayout*, UINT);
	void (CALLBACK *onClose)(UINT);
};
static QList<QCPINFO> formList;
static CLock listLock;
static BOOL initOnce = FALSE;
static QIcon *formIcon = NULL;
static const BYTE icon_png[430] =
{
	0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00, 0x0D,0x49,0x48,0x44,0x52,0x00,0x00,0x00,0x10,0x00,0x00,
	0x00,0x10,0x08,0x03,0x00,0x00,0x00,0x28,0x2D,0x0F,0x53,	0x00,0x00,0x00,0x04,0x67,0x41,0x4D,0x41,0x00,0x00,0xB1,
	0x8F,0x0B,0xFC,0x61,0x05,0x00,0x00,0x00,0x01,0x73,0x52,	0x47,0x42,0x00,0xAE,0xCE,0x1C,0xE9,0x00,0x00,0x00,0x9C,
	0x50,0x4C,0x54,0x45,0x00,0x00,0x00,0x0A,0x0A,0x0A,0x1A,	0x1A,0x1A,0x1A,0x1A,0x1E,0x2C,0x2C,0x2C,0x14,0x14,0x14,
	0x14,0x14,0x14,0x1D,0x1D,0x1D,0x2C,0x2C,0x2C,0x1D,0x1D,	0x1D,0x2D,0x2D,0x2D,0x31,0x32,0x33,0x2F,0x2F,0x2F,0x11,
	0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,	0x2D,0x2D,0x2D,0x21,0x21,0x21,0x2C,0x2C,0x2C,0x11,0x11,
	0x11,0x4B,0x4E,0x5B,0x13,0x13,0x13,0x4A,0x4A,0x4A,0x11,	0x11,0x11,0x11,0x11,0x11,0x2C,0x2D,0x2D,0x11,0x11,0x11,
	0x50,0x4D,0x4B,0xA5,0x91,0x7C,0xC1,0x96,0x6B,0x93,0x7A,	0x62,0x36,0x36,0x35,0x45,0x44,0x43,0x15,0x15,0x15,0x45,
	0x53,0x95,0x53,0x5B,0x7C,0x3F,0x43,0x56,0x1C,0x1C,0x1C,	0x42,0x41,0x41,0x6D,0x64,0x5A,0x66,0x67,0x69,0x62,0x57,
	0x4C,0x9F,0x80,0x61,0x64,0x69,0x7F,0x7E,0x6D,0x5B,0x46,	0x51,0x84,0x43,0x4B,0x71,0x5C,0x5B,0x5A,0x1B,0x1B,0x1C,
	0x46,0x48,0x52,0x67,0x6E,0x8D,0x4D,0xF8,0x6F,0x34,0x00,	0x00,0x00,0x1A,0x74,0x52,0x4E,0x53,0x00,0x41,0x02,0x6B,
	0xD9,0x13,0x37,0x28,0x5B,0x07,0xA6,0xBF,0x8B,0xE1,0xB9,	0x9A,0xD0,0xCB,0x78,0xBD,0xA4,0x62,0x4A,0xD1,0xF5,0x85,
	0x08,0x60,0xDB,0x20,0x00,0x00,0x00,0x8A,0x49,0x44,0x41,	0x54,0x18,0xD3,0x8D,0x8F,0x47,0x12,0x83,0x30,0x10,0x04,
	0x87,0x20,0x24,0x11,0x9D,0x83,0x56,0x64,0x70,0xCE,0xFE,	0xFF,0xDF,0xAC,0x02,0xF9,0x4E,0xDF,0x7A,0x6A,0xAA,0x76,
	0x16,0x98,0x0C,0x17,0x82,0x83,0x07,0xCC,0x2A,0x0B,0x95,	0x61,0xC9,0x03,0x67,0x74,0x77,0xAE,0x06,0xFC,0x8D,0x1C,
	0x03,0xA1,0x2C,0xB1,0x69,0xB8,0x8E,0xB7,0x8E,0xAC,0x57,	0x5B,0x06,0x99,0xBE,0x1F,0xED,0xCD,0x06,0xAF,0x08,0xD8,
	0x53,0xDF,0x3E,0xBB,0xF3,0xE0,0x77,0x1D,0x02,0x09,0x75,	0x3D,0x35,0x3A,0x3F,0xE9,0xCB,0xB5,0x54,0x01,0xB0,0xA3,
	0x2F,0x11,0x1D,0x74,0x5E,0x14,0x65,0x15,0x9B,0x03,0xA9,	0xFA,0x98,0x80,0x16,0xFE,0xB1,0xF6,0xC5,0xB0,0xB0,0x6E,
	0x8C,0x67,0x80,0x94,0xFF,0xCD,0xAB,0x64,0xE6,0xB9,0xD3,	0x7F,0xC4,0x0F,0x64,0xEA,0x0C,0xA0,0xAA,0xF3,0x0D,0xF0,
	0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,	0x82,
};


// IDA callback to handle UI events of interest
static int idaapi idaUiCallback(PVOID user, int code, va_list va)
{
	// A form is created
	if (code == ui_tform_visible)
	{
		// One of ours?
		QWidget *form = (QWidget *) va_arg(va, TForm *);
		listLock.lock();
		for (QList<QCPINFO>::iterator it = formList.begin(); it != formList.end(); ++it)
		{
			// yes
			if (it->form == form)
			{
				// Remove IDA's default layout and replace it with an QHBoxLayout instead
				if (QLayout *layout = form->layout())
					delete layout;
				it->layout = new QHBoxLayout(form);
				it->layout->setObjectName("verticalLayout");

				// Call user open function
				it->onOpen(it->form, it->layout, it->user);
				break;
			}
		}
		listLock.unlock();
	}
	else
	// A from is closed
	if (code == ui_tform_invisible)
	{
		// One of ours?
		QWidget *form = (QWidget *) va_arg(va, TForm *);
		listLock.lock();
		int n = 0;
		for (QList<QCPINFO>::iterator it = formList.begin(); it != formList.end(); ++it, n++)
		{
			// yes
			if (it->form == form)
			{
				// Call user close function
				it->onClose(it->user);

				// Kill layout
				if (it->layout)
				{
					delete it->layout;
					it->layout = NULL;
				}

				// Remove entry
				formList.removeAt(n);
				break;
			}
		}
		listLock.unlock();
	}
	return 0;
}

// Open an IDA form for QCustomPlot
QWidget* _cdecl idaqcp::openForm(LPCTSTR titleString, void (CALLBACK *onOpen)(QWidget*, QLayout*, UINT), void (CALLBACK *onClose)(UINT), UINT user /*= 0*/, BOOL startOnTab /*= TRUE*/)
{
	QWidget *form = NULL;

	// Initialize once
	if (!initOnce)
	{
		initOnce = TRUE;
		hook_to_notification_point(HT_UI, idaUiCallback, NULL);

		QPixmap pm;
		if (pm.loadFromData(icon_png, sizeof(icon_png), "PNG"))
			formIcon = new QIcon(pm);
	}

	// Create IDA form and add it to our container list
	HWND hwnd = NULL;
	TForm *tform = create_tform(titleString, &hwnd);
	if (hwnd)
	{
		QCPINFO info;
		info.form = form = (QWidget *)tform;
		info.layout = NULL;
		info.user = user;
		info.onOpen = onOpen;
		info.onClose = onClose;
		listLock.lock();
		formList.push_front(info);
		listLock.unlock();
		open_tform(tform, (FORM_QWIDGET | FORM_RESTORE | FORM_CENTERED) | (startOnTab ? FORM_TAB : 0));
		form->setWindowIcon(*formIcon);
	}

	return(form);
}

// Close a plot form
void _cdecl idaqcp::closeForm(QWidget *form)
{
	// Will trigger a ui_tform_invisible event to complete the close process
	close_tform((TForm *) form, FORM_SAVE);
}


// Clean up when our plug-in looses scope
struct OnExit
{
	~OnExit()
	{
		if (initOnce)
		{
			unhook_from_notification_point(HT_UI, idaUiCallback, NULL);
			if (formIcon)
			{
				delete formIcon;
				formIcon = NULL;
			}
			initOnce = FALSE;
		}
		formList.clear();
	};
} static onExit;
